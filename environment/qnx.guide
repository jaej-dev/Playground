[QNX7.0 Build Environment]

0. Development Environment
- Host OS : Ubuntu 18.04 x64 or OSX
- Target OS : QNX7.0


1. Connecting the QNX Site 
    - Account Login
    - Download "QNX Software Center 1.3.1 Build 201808201144 - Linux Hosts"


2. QNX SDP install on Linux Host (Ubuntu 18.04) 
$ sudo chmod +x ./qnx-setup-201910030902-lin.run
$ ./qnx-setup-201910030902-lin.run
    - run the qnx software center
    - submit email and password 
    - Install the Qnx Software Development Platform 7.0

$ vim ~/qnx700/qnxsdp-env.sh
Origin
test "$BASH_SOURCE" = "" && echo "This script only can be run from bash" && return
SCRIPT_SOURCE=$BASH_SOURCE
test "$SCRIPT_SOURCE" = "$0" && echo "Script is being run, should be sourced" && exit 1

For Ubuntu18.04
test "$BASH_SOURCE" = ""
SCRIPT_SOURCE=$BASH_SOURCE
test "$SCRIPT_SOURCE" = "$0"

For OSX
SCRIPT_SOURCE=$0
	

$ vim ~/.profile
# qnx700 build environment                                                      
 source ~/qnx700/qnxsdp-env.sh


3.Boost library
3.1. To target QNX
$ ./bootstrap.sh
$ ./b2 toolset=qcc target-os=qnxnto link=static threading=multi address-model=64 runtime-link=static variant=debug --with-system --with-date_time --with-headers --with-iostreams

3.2. To target Linux
$ ./bootstrap.sh
$ ./b2 toolset=gcc target-os=linux link=static threading=multi address-model=64 runtime-link=static variant=debug --with-system --with-date_time --with-headers --with-iostreams

3.3. To target OSX
$ ./bootstrap.sh
$ ./b2 toolset=darwin target-os=darwin link=static threading=multi address-model=64 runtime-link=static variant=debug --with-system --with-date_time --with-headers --with-iostreams


4. Xerces c++ library
4.1. To target QNX
$ git clone https://github.com/apache/xerces-c.git  
$ mkdir build
$ cd build


* QNX로 빌드시 samples, tests에서 socket library 링크 에러난다. 그러므로 임시로 아래와 같이 수정하여 빌드한다.
  리눅스로 빌드시에는 socket라이브러리를 링킹하면 에러 발생 그러므로 QNX 빌드시에만 임시 수정할것.

macro(add_sample_executable name)
  add_executable(${name} ${ARGN})
  target_link_libraries(${name} xerces-c)          -> for Linux
  #target_link_libraries(${name} xerces-c socket)  -> for QNX
  set_target_properties(${name} PROPERTIES FOLDER "Samples")
  list(APPEND sample_programs ${name})                                           
endmacro()

for static library
$ cmake -G "Unix Makefiles" -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=release/ -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="qcc" -DCMAKE_CXX_COMPILER="q++" -DCMAKE_C_FLAGS="-Vgcc_ntox86_64 -Wall" -DCMAKE_CXX_FLAGS="-Vgcc_ntox86_64 -lang-c++ -Wall" ..
$ make -j8
$ make install (stored in build/release)

4.2. To target Linux
$ git clone https://github.com/apache/xerces-c.git  
$ mkdir build
$ cd build

for shared library
$ cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=release/ -DCMAKE_BUILD_TYPE=Release ..

for static library
$ cmake -G "Unix Makefiles" -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=release/ -DCMAKE_BUILD_TYPE=Release ..
$ make -j8
$ make test
$ make install  (stored in build/release)

4.3. To targt OSX
$

5. SSH Key Generation
$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/jwjang/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/jwjang/.ssh/id_rsa.
Your public key has been saved in /home/jwjang/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:85JLz8fuRNfUivsz4eIoj4e8glMKNv2jzt7hgyQu1H4 jwjang@ubuntu
The key's randomart image is:
+---[RSA 2048]----+
|                 |
|                .|
|                o|
|             . + |
|  ..    S   o o .|
| .=.o .  + . o.  |
|.o.= *..+...o. . |
|. .o=E=o+*.o+.+  |
| . o*oo++===+..o |
+----[SHA256]-----+

$  cat .ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdoI0ctvl3vVX+n3hCEO/pfi0tHNB9nK4W55OXWae2AA4oTOlHSZBFGV6Nxy+921YkLRELAoSRSYskAS/XvoNKW7625MaebUFvIW58OpOXH266ChUR4mCX9iPNcRH5NgMcrWKl69Ly59Jgdg3kS464biJ1EMKrUzsX9uKJ0d7MY1Ocpx3JIzJyrAgAsRoqWhJx4vQL6Kys/Un3jJJaaIb58dISnT0sXSUbPVxJNrWl57q1S2RN9GYRiyFhzx3t9VymTcD+WYDJyuFyImDpzGq3b7If6BeUCb7MolrkT5Sr3aF/Zec7DC0oneLvh3ltpdjpGkPOkxKrXxmwnVfK7u4Z jwjang@ubuntu


5. build error and fix 
5.1. 현상 : 
cc: use of warning level option -w0 through -w9 has been deprecated and will be removed in the next release.

5.2. 원인 : 컴파일러에서 지원하기 싫은듯

5.3. 해결 : 컴파일러의 warning option을 아래와 같이 변경 (qnx_specific.cmake)
set (CMAKE_C_FLAGS "-Vgcc_nto${PROC}${CLIB} -Wall"
set (CMAKE_CXX_FLAGS "-Vgcc_nto${PROC}${CLIB} -lang-c++ -Wall"


6. QNX administration with vmware player
6.1. Macbook 에서 network 설정시

6.2. VMware player 는 15.x로 최신버전을 받고, work station은 git 에서 소스를 받아 빌드하여 사용한다.
     qnx vm 이미지는 work station에서 생성한 QNX_SDP.vmx를 open 시켜서 사용한다.

6.3. root 계정이 기본적으로 사용하는 계정이며, ssh 서버 접근을 위한 root 계정의 비밀번호를 적용시킨다.
$ passwd 
비번입력 2회

6.4. Start up을 아래와 같이 수정하여 사용한다.
#!/bin/sh

echo "---> Starting serial driver..."
devc-ser8250 -e -b115200
waitfor /dev/ser1
echo "---> Starting USB driver..."
io-usb-otg -d hcd-ehci -d hcd-uhci
waitfor /dev/usb/io-usb-otg 10
echo "---> Mounting USB HID driver"
mount -T io-hid /lib/dll/devh-usb.so
echo "---> Starting network stack..."
io-pkt-v6-hc -dvmxnet3
if_up -p vx0
ifconfig vx0 up
#ifconfig vx0 inet 10.12.20.196 netmask 0xffffff00 broadcast 10.12.20.255
#ifconfig vx0 ip4csum-rx tcp4csum udp4csum tcp6csum udp6csum tso4 tso6

# Use sysctl to allow the target to respond to broadcast pings.
sysctl -qw net.inet.icmp.bmcastecho=1
dhclient -nw vx0
devc-pty

# Start ssh server
if [ ! -f /etc/ssh/ssh_host_dsa_key ]
then
    ssh-keygen -q -t dsa -N '' -f /etc/ssh/ssh_host_dsa_key
fi

if [ ! -f /etc/ssh/ssh_host_rsa_key ]
then
    ssh-keygen -q -t rsa -N '' -f /etc/ssh/ssh_host_rsa_key
fi

if [ ! -f /etc/ssh/ssh_host_ecdsa_key ]
then
    ssh-keygen -q -t ecdsa -N '' -f /etc/ssh/ssh_host_ecdsa_key
fi

if [ ! -f /etc/ssh/ssh_host_ed25519_key ]
then
    ssh-keygen -q -t ed25519 -N '' -f /etc/ssh/ssh_host_ed25519_key
fi
/usr/sbin/sshd

echo "---> Starting debug services"
qconn

echo "---> Starting audio driver..."
io-audio -d audiopci cap_name=defaultc,play_name=defaultp

echo "---> To start graphics (screen) run /etc/graphics-startup.sh"

echo "---> Starting inetd service..."
/usr/sbin/inetd &


7. QNX valgrind
7.1 external debuginfo 
valgrind --leak-check=full --trace-children=yes --show-leak-kinds=all --track-origins=yes --extra-debuginfo-path="/symbol_path/syms" --allow-mismatched-debuginfo=yes --verbose --log-file=valgrind-out.txt ./binary_name


7.2. normal
valgrind --leak-check=full --trace-children=yes --show-leak-kinds=all --track-origins=yes --verbose --log-file=valgrind-out.txt ./binary_name

