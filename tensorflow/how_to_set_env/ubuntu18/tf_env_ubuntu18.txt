1. Install Ubuntu16.04 without secure boot in UEFI
$ sudo apt -y install software-properties-common build-essential checkinstall wget curl git libssl-dev apt-transport-https ca-certificates
$ sudo apt -y install libavahi-compat-libdnssd-dev
$ sudo apt update
$ sudo apt -y install unace unrar zip unzip p7zip-full p7zip-rar sharutils rar uudeview mpack arj cabextract file-roller
$ sudo apt -y install icedtea-8-plugin openjdk-8-jre subversion rabbitvcs-nautilus git curl vim network-manager-openvpn gparted gnome-disk-utility usb-creator-gtk traceroute cloc whois mssh inotify-tools openssh-server sqlite3 etckeeper stress ntp
$ sudo apt -y install python-keyring
$ echo "fs.inotify.max_user_watches = 524288" | sudo tee /etc/sysctl.d/60-inotify.conf
$ sudo service procps restart
$ sudo apt-get install terminator
$ sudo apt-get install zsh
$ cd
$ sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
$ cd
$ wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf
$ wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf
$ mkdir .fonts
$ mv PowerlineSymbols.otf ~/.fonts/
$ mkdir -p .config/fontconfig/conf.d
$ fc-cache -vf ~/.fonts/
$ mv 10-powerline-symbols.conf ~/.config/fontconfig/conf.d/
$ vim ~/.zshrc
  modify 
  ZSH_THEME="agnoster"
$ sudo apt-get install dconf-cli
$ git clone git://github.com/sigurdga/gnome-terminal-colors-solarized.git ~/.solarized
$ cd ~/.solarized
$ ./install.sh
$ cd
$ vim ~/.zshrc
  modify 
  # Change theme colors to solarize
  eval `dircolors ~/.dir_colors/dircolors`
$ source ~/.zshrc
  To activate dark solarize theme in Terminator just right click on the terminal
  Preferences>Profiles>Colors>Foreground and Background>Built-in schemes: Solarized dark 
  Preferences>Profiles>Colors>Palette>Built-in schemes: Solarized
  exit terminal and execute terninal!!

* For powerline on the ubuntu18.04
$ sudo apt-get update
$ sudo apt-get install powerline fonts-powerline
$ sudo apt-get install zsh-theme-powerlevel9k
$ echo "source /usr/share/powerlevel9k/powerlevel9k.zsh-theme" >> ~/.zshrc
$ source ~/.zshrc

* for zsh pulig-in
$ cd
$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
$ git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
$ vim ~/.zshrc
  modify 
plugins=(                                                                       
     git                                                                         
     zsh-syntax-highlighting                                                     
     zsh-autosuggestions                                                         
 #    tmux                                                                       
 ) 
$ source ~/.zshrc

* For tensorflow source build
$ sudo apt-get install build-essential
$ sudo apt-get install cmake git unzip zip 
$ sudo apt-get install python2.7-dev python3.6-dev pylint
$ sudo apt-get install linux-headers-$(uname -r)

* for 64bit message passing framework
$ 
$ sudo apt-get install doxygen zlib1g-dev


2. Install NVIDIA GTX1070 driver
$ sudo apt update
$ sudo apt upgrade
$ sudo apt-get update
$ sudo add-apt-repository ppa:graphics-drivers/ppa

Check as below and then Apply Changes
Software updater -> Settings... -> Additional Drivers 
  -> Using NVIDIA driver metapackage from nvidia-driver-396(open source) 

$ nvidia-smi
Sun Jun 10 16:12:11 2018       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 396.24.02              Driver Version: 396.24.02                 |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  GeForce GTX 1070    Off  | 00000000:01:00.0  On |                  N/A |
|  0%   39C    P8    14W / 250W |    415MiB /  8118MiB |      1%      Default |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|=============================================================================|
|    0      1151      G   /usr/lib/xorg/Xorg                            18MiB |
|    0      1263      G   /usr/bin/gnome-shell                          51MiB |
|    0      1449      G   /usr/lib/xorg/Xorg                           149MiB |
|    0      1573      G   /usr/bin/gnome-shell                         104MiB |
|    0      3062      G   ...-token=350C6284C73EB9C7B04F95C3DBD7E3B2    89MiB |
+-----------------------------------------------------------------------------+



3. Install CUDA Toolkit 9.2
3.1. Go to https://developer.nvidia.com/cuda-downloads
Check Linux, x86_64, Ubuntu, 17.10, runfile (local) and then download 
Base installer and Patches

$ cd ~/Downloads
$ sudo chmod +x cuda_9.2.88*
$ sudo ./cuda_9.2.88_396.26_linux.run --override
NOTE: Make sure you donâ€™t agree to install the new driver!!!
-------------------------------------------------------------------------------
Do you accept the previously read EULA?
accept/decline/quit: accept

You are attempting to install on an unsupported configuration. Do you wish to continue?
(y)es/(n)o [ default is no ]: y

Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 396.26?
(y)es/(n)o/(q)uit: n

Install the CUDA 9.2 Toolkit?
(y)es/(n)o/(q)uit: y

Enter Toolkit Location
 [ default is /usr/local/cuda-9.2 ]: 

/usr/local/cuda-9.2 is not writable.
Do you wish to run the installation with 'sudo'?
Note that this feature is deprecated in CUDA 9.2 and will be removed in a future release.
(y)es/(n)o: y

Please enter your password: 
Do you want to install a symbolic link at /usr/local/cuda?
(y)es/(n)o/(q)uit: y

Install the CUDA 9.2 Samples?
(y)es/(n)o/(q)uit: y

Enter CUDA Samples Location
 [ default is /home/jaej ]: 

Installing the CUDA Toolkit in /usr/local/cuda-9.2 ...
Missing recommended library: libGLU.so
Missing recommended library: libX11.so
Missing recommended library: libXi.so
Missing recommended library: libXmu.so
Missing recommended library: libGL.so

Installing the CUDA Samples in /home/jaej ...
Copying samples to /home/jaej/NVIDIA_CUDA-9.2_Samples now...
Finished copying samples.

===========
= Summary =
===========

Driver:   Not Selected
Toolkit:  Installed in /usr/local/cuda-9.2
Samples:  Installed in /home/jaej, but missing recommended libraries

Please make sure that
 -   PATH includes /usr/local/cuda-9.2/bin
 -   LD_LIBRARY_PATH includes /usr/local/cuda-9.2/lib64, or, add /usr/local/cuda-9.2/lib64 to /etc/ld.so.conf and run ldconfig as root

To uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-9.2/bin

Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-9.2/doc/pdf for detailed information on setting up CUDA.

***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 384.00 is required for CUDA 9.2 functionality to work.
To install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this run file:
    sudo <CudaInstaller>.run -silent -driver

Logfile is /tmp/cuda_install_8796.log
-------------------------------------------------------------------------------

$ sudo ./cuda_9.2.88.1_linux.run
-------------------------------------------------------------------------------
Do you accept the previously read EULA?
accept/decline/quit: accept

Enter CUDA Toolkit installation directory
 [ default is /usr/local/cuda-9.2 ]: 

Installation complete!
Installation directory: /usr/local/cuda-9.2
-------------------------------------------------------------------------------


3.2. Add following paths at the end of the file ~/.bashrc or ~/.zshrc
$ vim ~/.zshrc
# CUDA Toolkit 9.2
export PATH=/usr/local/cuda-9.2/bin${PATH:+${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-9.2/lib64:${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}}

$ source ~/.zshrc



4. Install CUDNN 7.1.4 for CUDA9.2
4.1. Go to https://developer.nvidia.com/rdp/cudnn-download
4.2. Download cuDNN v7.1.4 Library for Linux
4.3. Execute following commands 
$ cd ~/Downloads
$ tar -xzvf cudnn-9.2-linux-x64-v7.1.tgz
$ sudo cp -P /usr/local/cuda/lib64/* /usr/local/cuda-9.2/lib64/
$ sudo cp /usr/local/cuda/include/* /usr/local/cuda-9.2/include/




5. Install libcupti
$ sudo apt-get install libcupti-dev




6. Install Tensorflow GPU with native pip
$ sudo apt-get install python-pip python-dev
$ sudo apt-get install python3-pip python3-dev
$ sudo -H pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.8.0-cp27-none-linux_x86_64.whl
$ sudo -H pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.8.0-cp36-cp36m-linux_x86_64.whl

** this procedure occur library version problem 9.2 vs 9.0!!!

** Uninstall
$ sudo -H pip uninstall tensorflow-gpu 
$ sudo -H pip3 uninstall tensorflow-gpu


7. Simple test
$ python3



